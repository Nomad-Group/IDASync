ifneq ($(wildcard ../../parse),)
  ENABLE_LOWCNDS=1
endif
ifneq ($(wildcard ../../ida),)
  ifndef __CEARM__
    ENABLE_REMOTEPDB=1
  endif
endif

#DONT_FORCE_CPP=1
#__CFLAGS=-DLIBWRAP
#LIBWRAP=-lwrap

PLUGIN_SCRIPT_PATH=../../plugins/plugin.script
STRIPOBJS=rpc_server.cpp

O1=debmod
O2=pc_debmod
ifdef __LINUX__
  PINBASE_DEBMOD=$(F)linuxbase_debmod$(O)
  ifdef __ARM__
    SERVER=armlinux_server
    INCFLAGS=-DWAIT_IN_MAIN_THREAD # we are compiling for wd
#    STATIC_BUILD=-static -lpthread # specify the lib once more so that the linker sees it
  else
    SERVER=linux_server
    PROC=linux_user
    O3=linux_debmod
    O4=linux_wait
    O5=symelf
    O6=linuxbase_debmod
  endif
  LINUX_SERVER=$(SERVER)
  WRPOBJ=$(F)linux_check$(O)
  ADDITIONAL_LIBS=-ldl -lthread_db
  PLUGIN_SCRIPT=-Wl,--version-script=linux_debmod.script -Wl,--export-dynamic,--build-id
else
  INCFLAGS=-I../../ldr/mach-o/h
  PINBASE_DEBMOD=$(F)macbase_debmod$(O)
  SERVER=mac_server
  PROC=mac_user
  O3=mac_debmod
  O4=excServer
  O5=symmacho
  O6=macbase_debmod
  ADDITIONAL_LIBS=-framework Security -framework CoreFoundation
endif

# do not build mixed servers, where sizeof(ea_t)==8 but sizeof(size_t)==4
# they do not make any sense
ifneq ($(__EA64__),$(__X64__))
  SERVER=
endif

ifndef __X64__
  DONT_BUILD_PLUGIN=1
endif

ifdef ENABLE_LOWCNDS
  LOWCND_FLAGS=-DENABLE_LOWCNDS
  LOWCND_LIBS=$(L)idc$(A)
  LOWCND_OBJS=$(F)idcfuncs$(O) $(L)dbgsrv_funcs$(O)
  O7=idcfuncs
endif

ifdef ENABLE_REMOTEPDB
  REMOTEPDB_FLAGS=-DENABLE_REMOTEPDB
endif
__CFLAGS=$(INCFLAGS) $(NORTTI) -DBUILD_DEBUGGER $(LOWCND_FLAGS) $(REMOTEPDB_FLAGS)

ifdef __X64__
MODULES=win32_stub      \
        linux_stub      \
        armlinux_stub   \
        mac_stub        \
        cfg             \

endif

ADDITIONAL_GOALS=$(SERVER) $(MODULES)

include ../../plugins/plugin.mak

# all debug servers should go under the dbgsrv directory
SERVERBIN=$(R)dbgsrv/

RPC_COMMON=$(F)rpc_hlp$(O) $(F)rpc_engine$(O) $(F)util$(O)
STUB_COMMON=$(RPC_COMMON) $(F)rpc_client$(O) $(F)rpc_debmod$(O) $(F)debmod$(O)
SERVER_COMMON=$(F)server$(O) $(RPC_COMMON) $(F)rpc_server$(O) $(F)debmod$(O) \
              $(F)$(TARGET_PROCESSOR_MODULE)_debmod$(O) $(LOWCND_OBJS)

.PHONY: mkdeb mac_server linux_server

#-----------------------------------------------------------------------------
# Servers
#------------
MAC_OBJS=$(SERVER_COMMON) $(F)mac_debmod$(O) $(F)macbase_debmod$(O) $(F)tcpip$(O) $(F)excServer$(O) $(F)symmacho$(O)
MAPFILE=-Wl,-map,$(F)$(@F).map
MKDEB=/usr/local/bin/mkdeb

# NOTE: perform the steps in mac_server_certificate.txt before using CODESIGN_MAC_SERVER!
ifdef CODESIGN_MAC_SERVER
  CODESIGN_IDENTITY?=mac_server
  ifdef MAC_KEYCHAIN
    CODESIGN_OPTS=--keychain $(MAC_KEYCHAIN).keychain
  endif
  MAC_SERVER_FINAL=codesign $(CODESIGN_OPTS) -s $(CODESIGN_IDENTITY)
else
  MAC_SERVER_FINAL=$(MKDEB)
endif

PLIST_NAME=mac_debug$(B).plist
EMBEDPLIST=-Wl,-sectcreate,__TEXT,__info_plist,$(PLIST_NAME)
mac_server: $(SERVERBIN)mac_server$(B)
$(SERVERBIN)mac_server$(B): $(MAC_OBJS) $(LOWCND_LIBS) $(L)pro$(A) $(PLIST_NAME)
	$(call link_dumb,$@ $(MAC_OBJS) $(LOWCND_LIBS) $(MAPFILE) $(EMBEDPLIST) $(ADDITIONAL_LIBS))
	$(MAC_SERVER_FINAL) $@
iloop: loop.cpp
	$(CCL) -o $@ loop.cpp $(STDLIBS)
isignal: linux/signal.cpp
	$(CCL) -o $@ linux/signal.cpp $(STDLIBS)
#----------------------------------------------------------------------------
# Linux server
LINUX_OBJS=$(SERVER_COMMON) $(WRPOBJ) $(F)linux_debmod$(O) \
           $(F)linuxbase_debmod$(O) \
           $(F)symelf$(O) $(F)tcpip$(O) $(F)linux_wait$(O)
LINUX_LIBS=$(LOWCND_LIBS) $(L)pro$(A) $(LIBWRAP) $(ADDITIONAL_LIBS) $(STDLIBS)
LINUX_MAP =-Wl,-Map,$(F)$(LINUX_SERVER)$(B).map

$(LINUX_SERVER): $(SERVERBIN)$(LINUX_SERVER)$(B)
$(SERVERBIN)$(LINUX_SERVER)$(B): $(LINUX_OBJS) $(LOWCND_LIBS) $(L)pro$(A)
	$(CCL) -o$@ $(PLUGIN_SCRIPT) $(LINUX_OBJS) $(DUMB) $(LINUX_LIBS) $(STATIC_BUILD) $(LINUX_MAP)
#-----------------------------------------------------------------------------
# Stubs
CLLOPTS=-L$(L) $(LINKIDA) $(PLUGIN_SCRIPT) $(STDLIBS)
#------------
WIN32_LOCAL_OBJ=$(F)win32_rstub$(O) $(F)tcpip$(O) $(STUB_COMMON) $(F)w32sehch$(O)
WIN32CLIENT=$(BIN_PATH)win32_stub$(PLUGIN)
win32_stub: $(WIN32CLIENT)

$(WIN32CLIENT): $(WIN32_LOCAL_OBJ) $(PLUGIN_SCRIPT_PATH)
	$(CCL) $(OUTDLL) $(OUTSW)$@ $(WIN32_LOCAL_OBJ) $(CLLOPTS)

#------------
WINCE_STUB_OBJ=$(F)wince_rstub$(O) $(F)tcpip$(O) $(STUB_COMMON)
WINCECLIENT=$(BIN_PATH)wincetcp_stub$(PLUGIN)
wince_stub: $(WINCECLIENT)

$(WINCECLIENT): $(WINCE_STUB_OBJ) $(PLUGIN_SCRIPT_PATH)
	$(CCL) $(OUTDLL) $(OUTSW)$@ $(WINCE_STUB_OBJ) $(CLLOPTS)
#------------
LINUX_LOCAL_OBJ=$(F)linux_rstub$(O) $(F)tcpip$(O) $(STUB_COMMON)
LINUXCLIENT=$(BIN_PATH)linux_stub$(PLUGIN)
linux_stub: $(LINUXCLIENT)
$(LINUXCLIENT): $(LINUX_LOCAL_OBJ) $(PLUGIN_SCRIPT_PATH)
	$(CCL) $(OUTDLL) $(OUTSW)$@ $(LINUX_LOCAL_OBJ) $(CLLOPTS)
#------------
ARM_LINUX_LOCAL_OBJ=$(F)armlinux_rstub$(O) $(F)tcpip$(O) $(STUB_COMMON)
ARM_LINUXCLIENT=$(BIN_PATH)armlinux_stub$(PLUGIN)
armlinux_stub: $(ARM_LINUXCLIENT)
$(ARM_LINUXCLIENT): $(ARM_LINUX_LOCAL_OBJ) $(PLUGIN_SCRIPT_PATH)
	$(CCL) $(OUTDLL) $(OUTSW)$@ $(ARM_LINUX_LOCAL_OBJ) $(CLLOPTS)
#------------
MAC_LOCAL_OBJ=$(F)mac_rstub$(O) $(F)tcpip$(O) $(STUB_COMMON)
MACCLIENT=$(BIN_PATH)mac_stub$(PLUGIN)
mac_stub: $(MACCLIENT)
$(MACCLIENT): $(MAC_LOCAL_OBJ) $(PLUGIN_SCRIPT_PATH)
	$(CCL) $(OUTDLL) $(OUTSW)$@ $(MAC_LOCAL_OBJ) $(CLLOPTS)
#------------

#----------------------------------------------------------------------------
cfg: $(C)exceptions.cfg

$(C)%.cfg: %.cfg
	$(CP) $? $@

$(C)%.xml: %.xml
	$(CP) $? $@


excServer.c:
	mig $(MACSDK)/usr/include/mach/exc.defs

mkdeb: $(MKDEB)
$(MKDEB): mkdeb.cpp
	rm -f mkdeb
	$(CCL) -o mkdeb mkdeb.cpp
	sudo cp mkdeb $@
	sudo chown root $@
	sudo chmod 4100 $@


#----------------------------------------------------------------------------
loaddll_test: $(R)loaddll_test$(B)
$(R)loaddll_test$(B): $(F)loaddll_test$(O) $(DUMB) $(L)pro$(A)
	$(call link_dumb,$@ $(F)loaddll_test$(O) -ldl)

clean::
	rm -f $(WIN32_LOCAL_OBJ) $(WINCE_STUB_OBJ) $(LINUX_LOCAL_OBJ) $(ARM_LINUX_LOCAL_OBJ) $(MAC_LOCAL_OBJ)
	rm -f $(LINUX_OBJS) $(F)$(LINUX_SERVER)$(B).map
	rm -f $(WIN32CLIENT) $(ARM_LINUXCLIENT) $(LINUXCLIENT) $(WINCECLIENT) $(MACCLIENT)
	rm -f $(SERVERBIN)mac_server$(B) $(SERVERBIN)linux_server$(B) $(SERVERBIN)armlinux_server$(B)
	rm -f $(C)exceptions.cfg
	-@[ -d $(OBJDIR) ] && rmdir $(OBJDIR)
	-@[ -d obj ] && rmdir obj

# MAKEDEP dependency list ------------------
$(F)debmod$(O)  : $(I)bitrange.hpp $(I)bytes.hpp $(I)config.hpp             \
	          $(I)diskio.hpp $(I)err.h $(I)expr.hpp $(I)fpro.h          \
	          $(I)funcs.hpp $(I)ida.hpp $(I)idd.hpp $(I)idp.hpp         \
	          $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp $(I)nalt.hpp  \
	          $(I)name.hpp $(I)netnode.hpp $(I)pro.h $(I)range.hpp      \
	          $(I)segment.hpp $(I)typeinf.hpp $(I)ua.hpp $(I)xref.hpp   \
	          consts.h debmod.cpp debmod.h
$(F)pc_debmod$(O): $(I)bytes.hpp $(I)ida.hpp $(I)idd.hpp $(I)kernwin.hpp     \
	          $(I)lines.hpp $(I)llong.hpp $(I)nalt.hpp $(I)netnode.hpp  \
	          $(I)pro.h $(I)range.hpp $(I)ua.hpp $(I)xref.hpp consts.h  \
	          deb_pc.hpp debmod.h pc_debmod.cpp pc_debmod.h

ifdef __LINUX__
$(F)linux_debmod$(O): $(I)bitrange.hpp $(I)bytes.hpp $(I)config.hpp             \
	          $(I)diskio.hpp $(I)err.h $(I)fpro.h $(I)funcs.hpp         \
	          $(I)ida.hpp $(I)idd.hpp $(I)idp.hpp $(I)kernwin.hpp       \
	          $(I)lines.hpp $(I)llong.hpp $(I)loader.hpp $(I)nalt.hpp   \
	          $(I)name.hpp $(I)netnode.hpp $(I)pro.h $(I)prodir.h       \
	          $(I)range.hpp $(I)segment.hpp $(I)ua.hpp $(I)xref.hpp     \
	          ../../plugins/dwarf/look_for_debug_file.cpp arm_debmod.h  \
	          consts.h deb_arm.hpp deb_pc.hpp debmod.h                  \
	          linux_debmod.cpp linux_debmod.h linux_threads.cpp         \
	          linuxbase_debmod.h pc_debmod.h symelf.hpp
$(F)linux_user$(O): $(I)bitrange.hpp $(I)bytes.hpp $(I)config.hpp             \
	          $(I)dbg.hpp $(I)err.h $(I)expr.hpp $(I)fpro.h             \
	          $(I)funcs.hpp $(I)ida.hpp $(I)idd.hpp $(I)idp.hpp         \
	          $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp               \
	          $(I)loader.hpp $(I)nalt.hpp $(I)name.hpp $(I)netnode.hpp  \
	          $(I)pro.h $(I)range.hpp $(I)segment.hpp $(I)segregs.hpp   \
	          $(I)typeinf.hpp $(I)ua.hpp $(I)xref.hpp arm_debmod.h      \
	          common_local_impl.cpp common_stub_impl.cpp consts.h       \
	          deb_arm.hpp deb_pc.hpp debmod.h linux_debmod.h            \
	          linux_local_impl.cpp linux_user.cpp linuxbase_debmod.h    \
	          pc_debmod.h pc_local_impl.cpp
$(F)linux_wait$(O): $(I)bytes.hpp $(I)ida.hpp $(I)idd.hpp $(I)kernwin.hpp     \
	          $(I)lines.hpp $(I)llong.hpp $(I)nalt.hpp $(I)netnode.hpp  \
	          $(I)pro.h $(I)range.hpp $(I)ua.hpp $(I)xref.hpp           \
	          arm_debmod.h consts.h deb_arm.hpp deb_pc.hpp debmod.h     \
	          linux_debmod.h linux_wait.cpp linuxbase_debmod.h          \
	          pc_debmod.h
$(F)linuxbase_debmod$(O): $(I)bytes.hpp $(I)diskio.hpp $(I)fpro.h $(I)ida.hpp       \
	          $(I)idd.hpp $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp   \
	          $(I)nalt.hpp $(I)netnode.hpp $(I)pro.h $(I)prodir.h       \
	          $(I)range.hpp $(I)ua.hpp $(I)xref.hpp arm_debmod.h        \
	          consts.h deb_arm.hpp deb_pc.hpp debmod.h                  \
	          linuxbase_debmod.cpp linuxbase_debmod.h pc_debmod.h
$(F)symelf$(O)  : $(I)auto.hpp $(I)bitrange.hpp $(I)bytes.hpp               \
	          $(I)config.hpp $(I)diskio.hpp $(I)entry.hpp               \
	          $(I)fixup.hpp $(I)fpro.h $(I)funcs.hpp $(I)ida.hpp        \
	          $(I)idd.hpp $(I)idp.hpp $(I)kernwin.hpp $(I)lines.hpp     \
	          $(I)llong.hpp $(I)loader.hpp $(I)nalt.hpp $(I)name.hpp    \
	          $(I)netnode.hpp $(I)offset.hpp $(I)pro.h $(I)range.hpp    \
	          $(I)segment.hpp $(I)segregs.hpp $(I)ua.hpp $(I)xref.hpp   \
	          ../../ldr/elf/../idaldr.h ../../ldr/elf/common.cpp        \
	          ../../ldr/elf/elf.h ../../ldr/elf/elfbase.h               \
	          ../../ldr/elf/elfr_arm.h ../../ldr/elf/elfr_ia64.h        \
	          ../../ldr/elf/elfr_mips.h ../../ldr/elf/elfr_ppc.h        \
	          ../../ldr/elf/reader.cpp                                  \
	          ../../module/arm/notify_codes.hpp consts.h debmod.h       \
	          symelf.cpp symelf.hpp

else

$(F)excServer$(O): ../../ldr/mach-o/h/arm/_types.h                           \
	          ../../ldr/mach-o/h/i386/_types.h                          \
	          ../../ldr/mach-o/h/mach/arm/boolean.h                     \
	          ../../ldr/mach-o/h/mach/arm/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/boolean.h                         \
	          ../../ldr/mach-o/h/mach/i386/boolean.h                    \
	          ../../ldr/mach-o/h/mach/i386/kern_return.h                \
	          ../../ldr/mach-o/h/mach/i386/vm_param.h                   \
	          ../../ldr/mach-o/h/mach/i386/vm_types.h                   \
	          ../../ldr/mach-o/h/mach/kern_return.h                     \
	          ../../ldr/mach-o/h/mach/machine/boolean.h                 \
	          ../../ldr/mach-o/h/mach/machine/kern_return.h             \
	          ../../ldr/mach-o/h/mach/machine/vm_types.h                \
	          ../../ldr/mach-o/h/mach/message.h                         \
	          ../../ldr/mach-o/h/mach/port.h                            \
	          ../../ldr/mach-o/h/mach/ppc/boolean.h                     \
	          ../../ldr/mach-o/h/mach/ppc/kern_return.h                 \
	          ../../ldr/mach-o/h/mach/ppc/vm_param.h                    \
	          ../../ldr/mach-o/h/mach/ppc/vm_types.h                    \
	          ../../ldr/mach-o/h/ppc/_types.h                           \
	          ../../ldr/mach-o/h/sys/_posix_availability.h              \
	          ../../ldr/mach-o/h/sys/_symbol_aliasing.h                 \
	          ../../ldr/mach-o/h/sys/cdefs.h excServer.c
$(F)mac_debmod$(O): $(I)bitrange.hpp $(I)bytes.hpp $(I)config.hpp             \
	          $(I)diskio.hpp $(I)err.h $(I)fpro.h $(I)funcs.hpp         \
	          $(I)ida.hpp $(I)idd.hpp $(I)idp.hpp $(I)kernwin.hpp       \
	          $(I)lines.hpp $(I)llong.hpp $(I)loader.hpp $(I)nalt.hpp   \
	          $(I)name.hpp $(I)netnode.hpp $(I)pro.h $(I)range.hpp      \
	          $(I)segment.hpp $(I)ua.hpp $(I)xref.hpp                   \
	          ../../ldr/mach-o/common.h                                 \
	          ../../ldr/mach-o/h/architecture/byte_order.h              \
	          ../../ldr/mach-o/h/arm/_types.h                           \
	          ../../ldr/mach-o/h/i386/_types.h                          \
	          ../../ldr/mach-o/h/i386/eflags.h                          \
	          ../../ldr/mach-o/h/libkern/OSByteOrder.h                  \
	          ../../ldr/mach-o/h/libkern/i386/OSByteOrder.h             \
	          ../../ldr/mach-o/h/libkern/i386/_OSByteOrder.h            \
	          ../../ldr/mach-o/h/libkern/machine/OSByteOrder.h          \
	          ../../ldr/mach-o/h/mach-o/arm/reloc.h                     \
	          ../../ldr/mach-o/h/mach-o/arm64/reloc.h                   \
	          ../../ldr/mach-o/h/mach-o/fat.h                           \
	          ../../ldr/mach-o/h/mach-o/hppa/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/i860/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/loader.h                        \
	          ../../ldr/mach-o/h/mach-o/m88k/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/nlist.h                         \
	          ../../ldr/mach-o/h/mach-o/ppc/reloc.h                     \
	          ../../ldr/mach-o/h/mach-o/reloc.h                         \
	          ../../ldr/mach-o/h/mach-o/sparc/reloc.h                   \
	          ../../ldr/mach-o/h/mach-o/stab.h                          \
	          ../../ldr/mach-o/h/mach-o/x86_64/reloc.h                  \
	          ../../ldr/mach-o/h/mach/arm/_structs.h                    \
	          ../../ldr/mach-o/h/mach/arm/boolean.h                     \
	          ../../ldr/mach-o/h/mach/arm/thread_state.h                \
	          ../../ldr/mach-o/h/mach/arm/thread_status.h               \
	          ../../ldr/mach-o/h/mach/arm/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/boolean.h                         \
	          ../../ldr/mach-o/h/mach/i386/_structs.h                   \
	          ../../ldr/mach-o/h/mach/i386/boolean.h                    \
	          ../../ldr/mach-o/h/mach/i386/fp_reg.h                     \
	          ../../ldr/mach-o/h/mach/i386/kern_return.h                \
	          ../../ldr/mach-o/h/mach/i386/thread_state.h               \
	          ../../ldr/mach-o/h/mach/i386/thread_status.h              \
	          ../../ldr/mach-o/h/mach/i386/vm_param.h                   \
	          ../../ldr/mach-o/h/mach/i386/vm_types.h                   \
	          ../../ldr/mach-o/h/mach/kern_return.h                     \
	          ../../ldr/mach-o/h/mach/machine.h                         \
	          ../../ldr/mach-o/h/mach/machine/boolean.h                 \
	          ../../ldr/mach-o/h/mach/machine/kern_return.h             \
	          ../../ldr/mach-o/h/mach/machine/thread_status.h           \
	          ../../ldr/mach-o/h/mach/machine/vm_types.h                \
	          ../../ldr/mach-o/h/mach/message.h                         \
	          ../../ldr/mach-o/h/mach/port.h                            \
	          ../../ldr/mach-o/h/mach/ppc/_structs.h                    \
	          ../../ldr/mach-o/h/mach/ppc/boolean.h                     \
	          ../../ldr/mach-o/h/mach/ppc/kern_return.h                 \
	          ../../ldr/mach-o/h/mach/ppc/thread_status.h               \
	          ../../ldr/mach-o/h/mach/ppc/vm_param.h                    \
	          ../../ldr/mach-o/h/mach/ppc/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/shared_region.h                   \
	          ../../ldr/mach-o/h/mach/vm_prot.h                         \
	          ../../ldr/mach-o/h/mach/vm_types.h                        \
	          ../../ldr/mach-o/h/ppc/_types.h                           \
	          ../../ldr/mach-o/h/sys/_posix_availability.h              \
	          ../../ldr/mach-o/h/sys/_symbol_aliasing.h                 \
	          ../../ldr/mach-o/h/sys/appleapiopts.h                     \
	          ../../ldr/mach-o/h/sys/cdefs.h                            \
	          ../../ldr/mach-o/h/sys/ptrace.h                           \
	          ../../ldr/mach-o/macho_node.h consts.h deb_pc.hpp         \
	          debmod.h mac_debmod.cpp mac_debmod.h macbase_debmod.h     \
	          pc_debmod.h symmacho.hpp
$(F)mac_user$(O): $(I)bitrange.hpp $(I)bytes.hpp $(I)config.hpp             \
	          $(I)dbg.hpp $(I)diskio.hpp $(I)err.h $(I)expr.hpp         \
	          $(I)fpro.h $(I)funcs.hpp $(I)ida.hpp $(I)idd.hpp          \
	          $(I)idp.hpp $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp   \
	          $(I)loader.hpp $(I)nalt.hpp $(I)name.hpp $(I)netnode.hpp  \
	          $(I)pro.h $(I)range.hpp $(I)segment.hpp $(I)segregs.hpp   \
	          $(I)typeinf.hpp $(I)ua.hpp $(I)xref.hpp                   \
	          ../../ldr/mach-o/h/architecture/byte_order.h              \
	          ../../ldr/mach-o/h/arm/_types.h                           \
	          ../../ldr/mach-o/h/i386/_types.h                          \
	          ../../ldr/mach-o/h/libkern/OSByteOrder.h                  \
	          ../../ldr/mach-o/h/libkern/i386/OSByteOrder.h             \
	          ../../ldr/mach-o/h/libkern/i386/_OSByteOrder.h            \
	          ../../ldr/mach-o/h/libkern/machine/OSByteOrder.h          \
	          ../../ldr/mach-o/h/mach-o/fat.h                           \
	          ../../ldr/mach-o/h/mach-o/nlist.h                         \
	          ../../ldr/mach-o/h/mach-o/reloc.h                         \
	          ../../ldr/mach-o/h/mach/arm/boolean.h                     \
	          ../../ldr/mach-o/h/mach/arm/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/boolean.h                         \
	          ../../ldr/mach-o/h/mach/i386/boolean.h                    \
	          ../../ldr/mach-o/h/mach/i386/vm_param.h                   \
	          ../../ldr/mach-o/h/mach/i386/vm_types.h                   \
	          ../../ldr/mach-o/h/mach/machine.h                         \
	          ../../ldr/mach-o/h/mach/machine/boolean.h                 \
	          ../../ldr/mach-o/h/mach/machine/vm_types.h                \
	          ../../ldr/mach-o/h/mach/port.h                            \
	          ../../ldr/mach-o/h/mach/ppc/boolean.h                     \
	          ../../ldr/mach-o/h/mach/ppc/vm_param.h                    \
	          ../../ldr/mach-o/h/mach/ppc/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/shared_region.h                   \
	          ../../ldr/mach-o/h/mach/vm_prot.h                         \
	          ../../ldr/mach-o/h/mach/vm_types.h                        \
	          ../../ldr/mach-o/h/ppc/_types.h                           \
	          ../../ldr/mach-o/h/sys/_posix_availability.h              \
	          ../../ldr/mach-o/h/sys/_symbol_aliasing.h                 \
	          ../../ldr/mach-o/h/sys/appleapiopts.h                     \
	          ../../ldr/mach-o/h/sys/cdefs.h                            \
	          ../../ldr/mach-o/h/sys/ptrace.h                           \
	          ../../ldr/mach-o/macho_node.h common_local_impl.cpp       \
	          common_stub_impl.cpp consts.h deb_pc.hpp debmod.h         \
	          mac_debmod.h mac_local_impl.cpp mac_user.cpp              \
	          macbase_debmod.h macho_rebase.cpp pc_debmod.h             \
	          pc_local_impl.cpp symmacho.hpp
$(F)macbase_debmod$(O): $(I)bytes.hpp $(I)diskio.hpp $(I)fpro.h $(I)ida.hpp       \
	          $(I)idd.hpp $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp   \
	          $(I)nalt.hpp $(I)netnode.hpp $(I)pro.h $(I)prodir.h       \
	          $(I)range.hpp $(I)ua.hpp $(I)xref.hpp                     \
	          ../../ldr/mach-o/h/architecture/byte_order.h              \
	          ../../ldr/mach-o/h/arm/_types.h                           \
	          ../../ldr/mach-o/h/i386/_types.h                          \
	          ../../ldr/mach-o/h/libkern/OSByteOrder.h                  \
	          ../../ldr/mach-o/h/libkern/i386/OSByteOrder.h             \
	          ../../ldr/mach-o/h/libkern/i386/_OSByteOrder.h            \
	          ../../ldr/mach-o/h/libkern/machine/OSByteOrder.h          \
	          ../../ldr/mach-o/h/mach-o/fat.h                           \
	          ../../ldr/mach-o/h/mach/arm/boolean.h                     \
	          ../../ldr/mach-o/h/mach/arm/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/boolean.h                         \
	          ../../ldr/mach-o/h/mach/i386/boolean.h                    \
	          ../../ldr/mach-o/h/mach/i386/vm_param.h                   \
	          ../../ldr/mach-o/h/mach/i386/vm_types.h                   \
	          ../../ldr/mach-o/h/mach/machine.h                         \
	          ../../ldr/mach-o/h/mach/machine/boolean.h                 \
	          ../../ldr/mach-o/h/mach/machine/vm_types.h                \
	          ../../ldr/mach-o/h/mach/ppc/boolean.h                     \
	          ../../ldr/mach-o/h/mach/ppc/vm_param.h                    \
	          ../../ldr/mach-o/h/mach/ppc/vm_types.h                    \
	          ../../ldr/mach-o/h/ppc/_types.h consts.h deb_pc.hpp       \
	          debmod.h macbase_debmod.cpp macbase_debmod.h pc_debmod.h  \
	          symmacho.hpp
$(F)symmacho$(O): $(I)auto.hpp $(I)bitrange.hpp $(I)bytes.hpp               \
	          $(I)config.hpp $(I)diskio.hpp $(I)entry.hpp               \
	          $(I)fixup.hpp $(I)fpro.h $(I)funcs.hpp $(I)ida.hpp        \
	          $(I)idp.hpp $(I)kernwin.hpp $(I)lines.hpp $(I)llong.hpp   \
	          $(I)loader.hpp $(I)nalt.hpp $(I)name.hpp $(I)netnode.hpp  \
	          $(I)offset.hpp $(I)pro.h $(I)range.hpp $(I)segment.hpp    \
	          $(I)segregs.hpp $(I)ua.hpp $(I)xref.hpp                   \
	          ../../ldr/ar/aixar.hpp ../../ldr/ar/ar.hpp                \
	          ../../ldr/ar/arcmn.cpp ../../ldr/mach-o/../ar/ar.hpp      \
	          ../../ldr/mach-o/../idaldr.h ../../ldr/mach-o/base.cpp    \
	          ../../ldr/mach-o/common.cpp ../../ldr/mach-o/common.h     \
	          ../../ldr/mach-o/h/architecture/byte_order.h              \
	          ../../ldr/mach-o/h/arm/_types.h                           \
	          ../../ldr/mach-o/h/i386/_types.h                          \
	          ../../ldr/mach-o/h/i386/eflags.h                          \
	          ../../ldr/mach-o/h/libkern/OSByteOrder.h                  \
	          ../../ldr/mach-o/h/libkern/i386/OSByteOrder.h             \
	          ../../ldr/mach-o/h/libkern/i386/_OSByteOrder.h            \
	          ../../ldr/mach-o/h/libkern/machine/OSByteOrder.h          \
	          ../../ldr/mach-o/h/mach-o/arm/reloc.h                     \
	          ../../ldr/mach-o/h/mach-o/arm64/reloc.h                   \
	          ../../ldr/mach-o/h/mach-o/fat.h                           \
	          ../../ldr/mach-o/h/mach-o/hppa/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/i860/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/loader.h                        \
	          ../../ldr/mach-o/h/mach-o/m88k/reloc.h                    \
	          ../../ldr/mach-o/h/mach-o/nlist.h                         \
	          ../../ldr/mach-o/h/mach-o/ppc/reloc.h                     \
	          ../../ldr/mach-o/h/mach-o/reloc.h                         \
	          ../../ldr/mach-o/h/mach-o/sparc/reloc.h                   \
	          ../../ldr/mach-o/h/mach-o/stab.h                          \
	          ../../ldr/mach-o/h/mach-o/x86_64/reloc.h                  \
	          ../../ldr/mach-o/h/mach/arm/_structs.h                    \
	          ../../ldr/mach-o/h/mach/arm/boolean.h                     \
	          ../../ldr/mach-o/h/mach/arm/thread_state.h                \
	          ../../ldr/mach-o/h/mach/arm/thread_status.h               \
	          ../../ldr/mach-o/h/mach/arm/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/boolean.h                         \
	          ../../ldr/mach-o/h/mach/i386/_structs.h                   \
	          ../../ldr/mach-o/h/mach/i386/boolean.h                    \
	          ../../ldr/mach-o/h/mach/i386/fp_reg.h                     \
	          ../../ldr/mach-o/h/mach/i386/kern_return.h                \
	          ../../ldr/mach-o/h/mach/i386/thread_state.h               \
	          ../../ldr/mach-o/h/mach/i386/thread_status.h              \
	          ../../ldr/mach-o/h/mach/i386/vm_param.h                   \
	          ../../ldr/mach-o/h/mach/i386/vm_types.h                   \
	          ../../ldr/mach-o/h/mach/kern_return.h                     \
	          ../../ldr/mach-o/h/mach/machine.h                         \
	          ../../ldr/mach-o/h/mach/machine/boolean.h                 \
	          ../../ldr/mach-o/h/mach/machine/kern_return.h             \
	          ../../ldr/mach-o/h/mach/machine/thread_status.h           \
	          ../../ldr/mach-o/h/mach/machine/vm_types.h                \
	          ../../ldr/mach-o/h/mach/message.h                         \
	          ../../ldr/mach-o/h/mach/port.h                            \
	          ../../ldr/mach-o/h/mach/ppc/_structs.h                    \
	          ../../ldr/mach-o/h/mach/ppc/boolean.h                     \
	          ../../ldr/mach-o/h/mach/ppc/kern_return.h                 \
	          ../../ldr/mach-o/h/mach/ppc/thread_status.h               \
	          ../../ldr/mach-o/h/mach/ppc/vm_param.h                    \
	          ../../ldr/mach-o/h/mach/ppc/vm_types.h                    \
	          ../../ldr/mach-o/h/mach/vm_prot.h                         \
	          ../../ldr/mach-o/h/ppc/_types.h                           \
	          ../../ldr/mach-o/h/sys/_posix_availability.h              \
	          ../../ldr/mach-o/h/sys/_symbol_aliasing.h                 \
	          ../../ldr/mach-o/h/sys/cdefs.h                            \
	          ../../ldr/mach-o/macho_node.h symmacho.cpp symmacho.hpp
endif
