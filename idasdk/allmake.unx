#
# The following environment variables may be defined to influence the build process
#
#  __LINUX__    build linux version
#  __MAC__      build mac os x version
#  __TARGET_MAC_HOST_LINUX__  - build mac os x version under linux
#                               __MAC__ must be set, __LINUX__ must be unset
#  __BSD__      build bsd version
#
#  __EA64__     build 64-bit version (add 64-bit support, the application itself stays 32-bit)
#  __X64__      build 64-bit version of IDA itself (with 64-bit support)
#
#  __ARM__      build for ARM (default is Intel)
#
#  NDEBUG       release build (otherwise debug build)
#

# if IDA is not defined, take its definition from allmake.mak
# allmake.mak will define IDA and include allmake.unx
ifndef IDA
IDA:=$(dir $(lastword $(MAKEFILE_LIST)))
include $(dir $(lastword $(MAKEFILE_LIST)))allmake.mak
else
# the rest of the file is for unix
include $(IDA)defaults.mk

# define: dospath does not do anything in unix
dospath=$(1)
# define: convert dos path to unix path by replacing backslashes by slashes
unixpath=$(subst \,/,$(1))
# define: return absolute path given a relative path
qabspath=$(abspath $(1))/
# define: logical negation
not = $(if $(1),,1)
# define: comma to use in function calls as a literal
comma=,

__UNIX__=1

# our gcc for arm (on armlinux called wd) does not understand some warnings
ifndef __ARM__
  NOARM_WARNS=-Wno-missing-field-initializers
endif
# turn on most warnings
ifdef SUPPRESS_WARNINGS
  WARNS=-w
else
  FORMAT_WARNS=-Wformat=2 -Werror=format-security -Werror=format-nonliteral
  WARNS=-Wall -Wextra -Wno-sign-compare -Wno-parentheses -Wshadow -Wunused $(FORMAT_WARNS) $(NOARM_WARNS)
endif

# use -fdiagnostics-show-option to learn warning codes
# note: turn this on later: -Wcast-qual
# -Wlogical-op: generates wrong "logical ‘&&’ with non-zero constant will always evaluate as true"
#      -Wpadded
#      -Wredundant-decls
# -Wmissing-format-attribute
# -Wmissing-declarations
# -Wsuggest-attribute=pure -Wsuggest-attribute=const -Wsuggest-attribute=noreturn

ifdef __ARM__
  PROCFLAG=-D__ARM__
  TARGET_PROCESSOR_MODULE=arm
  OLD_GCC=1
else
  TARGET_PROCESSOR_MODULE=pc
endif
COMPILER_NAME=gcc
_GCC_VERSION=$(wordlist 1,2,$(subst ., ,$(shell gcc -dumpversion)))
GCC_VERSION_MAJOR=$(firstword $(_GCC_VERSION))
GCC_VERSION=$(GCC_VERSION_MAJOR).$(lastword $(_GCC_VERSION))
ifeq ("${GCC_VERSION_MAJOR}", "5")
  __GCC5__=1
endif
ifeq ("${GCC_VERSION_MAJOR}", "6")
  __GCC5__=1
endif
ifeq ("${GCC_VERSION_MAJOR}", "7")
  __GCC5__=1
  GCC5_WARNS=-Wimplicit-fallthrough=0
endif
ifdef __LINUX__
  ifdef __GCC5__
    GCC5_WARNS+=-Wno-unused-local-typedefs -fno-diagnostics-show-caret
    # disable new ABI
    GCC5_WARNS+=-D_GLIBCXX_USE_CXX11_ABI=0
    WARNS+=$(GCC5_WARNS)
  endif
endif
ifeq ("${GCC_VERSION}", "4.9")
  WARNS+=-Wno-unused-local-typedefs -fno-diagnostics-show-caret
endif
ifeq ("${GCC_VERSION}", "4.8")
  WARNS+=-Wno-unused-local-typedefs -fno-diagnostics-show-caret
endif
ifneq ("${GCC_VERSION}", "4.0")
  ifndef __TARGET_MAC_HOST_LINUX__
    WARNS+=-fdiagnostics-show-option
  endif
endif
# clang is extra picky - need to add some warning supressions
ifdef __MAC__
  ifneq ($(findstring clang,$(shell gcc --version 2> /dev/null)),)
    __CLANG__=1
    # must eventually get rid of most of these
    CLANG_WARNS+=-fno-caret-diagnostics -Wno-invalid-source-encoding -Wno-unused-const-variable -Wno-unused-private-field -Wno-logical-op-parentheses -Wno-self-assign -Wno-logical-not-parentheses -Wno-parentheses-equality -Wno-dynamic-class-memaccess -Wno-unused-variable -Wno-unused-function -Wno-char-subscripts -Wno-null-conversion -Wno-int-to-pointer-cast
    WARNS+=$(CLANG_WARNS)
  endif
endif

ifdef __MAC__
  ifndef MACSDK
    SDKDIR=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs
    # MACSDKVER format is MMmm, with MM = major, mm = minor.  It's important
    # that the number increases with each new version.
    ifneq ($(wildcard $(SDKDIR)/MacOSX10.12.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.12.sdk
      MACSDKVER=1012
    else ifneq ($(wildcard $(SDKDIR)/MacOSX10.11.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.11.sdk
      MACSDKVER=1011
    else ifneq ($(wildcard $(SDKDIR)/MacOSX10.10.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.10.sdk
      MACSDKVER=1010
    else ifneq ($(wildcard $(SDKDIR)/MacOSX10.9.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.9.sdk
      MACSDKVER=1009
    else ifneq ($(wildcard $(SDKDIR)/MacOSX10.8.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.8.sdk
      MACSDKVER=1008
    else ifneq ($(wildcard $(SDKDIR)/MacOSX10.7.sdk/*),)
      MACSDK=$(SDKDIR)/MacOSX10.7.sdk
      MACSDKVER=1007
    else ifneq ($(wildcard /Developer/SDKs/MacOSX10.7.sdk/*),)
      MACSDK=/Developer/SDKs/MacOSX10.7.sdk
      MACSDKVER=1007
    else ifneq ($(wildcard /Developer/SDKs/MacOSX10.6.sdk/*),)
      MACSDK=/Developer/SDKs/MacOSX10.6.sdk
      MACSDKVER=1006
    # LM-X cannot be linked with SDK 10.5
    else ifneq ($(and $(call not $(WITH_LMX)),$(wildcard /Developer/SDKs/MacOSX10.5.sdk/*)),)
      MACSDK=/Developer/SDKs/MacOSX10.5.sdk
      MACSDKVER=1005
    else ifneq ($(wildcard /opt/mac1/SDK/MacOSX10.11.sdk/*),) # cross compilation on linux
      MACSDK=/opt/mac1/SDK/MacOSX10.11.sdk
      MACSDKVER=1011
    else ifneq ($(wildcard /opt/target/SDK/MacOSX10.6.sdk/*),) # cross compilation on linux
      MACSDK=/opt/target/SDK/MacOSX10.6.sdk
      MACSDKVER=1006
    else ifneq ($(wildcard /opt/mac/SDKs/MacOSX10.4u.sdk/*),) # cross compilation on linux
      MACSDK=/opt/mac/SDKs/MacOSX10.4u.sdk
      MACSDKVER=1004
    else
      $(error Could not find MacOSX SDK)
    endif
  endif
endif

ifdef NDEBUG
  CCOPT=-O2 -ffunction-sections -fdata-sections -DNDEBUG -fomit-frame-pointer -g -D_FORTIFY_SOURCE=2
  OPTSUF=_opt
  ifdef __MAC__
    ifndef MAC_NO_DEAD_STRIP
      DEAD_STRIP=,-dead_strip
    endif
    OUTDLLOPTS=-Wl$(DEAD_STRIP)
    STRIPOPTS=-x
  else
    OUTDLLOPTS=-Wl,--build-id
    STRIPOPTS=--strip-debug --strip-all --discard-all --discard-locals
  endif
else
  CCOPT=-g -D_DEBUG
  OPTSUF=
  OUTDLLOPTS=
  STRIPOPTS=
endif

ifdef __LINUX__
BREAKPAD=$(THIRD_PARTY)breakpad/bins-linux
endif

ifdef __X64__
  SWITCHX64=-D__X64__
  APPBITS=64
  __PIC__=1
else
  APPBITS=32
  ifdef __LINUX__
    __PIC__=1
  endif
endif

ifdef __EA64__
  SUFF64=64
  ADRSIZE=64
  SWITCH64=-D__EA64__
else
  SUFF64=
  ADRSIZE=32
endif

ifdef __LINUX__
  STDLIBS=-lrt -lpthread -lc
  SYSNAME=linux
  ifndef OLD_GCC
    VISFLAGS=-fvisibility=hidden -fvisibility-inlines-hidden
  endif
  SYS=$(PROCFLAG) -D__LINUX__ $(VISFLAGS) --shared
  ifndef ALLOW_UNDEFS
    NO_UNDEFS=-Wl,--no-undefined
  endif
  _OUTDLL=-Wl,--gc-sections,--warn-shared-textrel $(NO_UNDEFS) $(OUTDLLOPTS)
  ifdef __ARM__
    BUILD_ONLY_SERVER=1
    TARGET_PROCESSOR_NAME=arm
    DIRSUFF=.lnx
    MODSUFF=.ilx
    PLGSUFF=.plx
    LDRSUFF=.llx
    DLLSUFF=.so
  else
    ifdef __X64__
      TARGET_PROCESSOR_NAME=x64
      ARCH_CFLAGS=-m64
      ASM_ARCH_CFLAGS=--64
      DIRSUFF=.lnx64
      DLLSUFF=.so
      MODSUFF=$(DLLSUFF)
      PLGSUFF=$(DLLSUFF)
      LDRSUFF=$(DLLSUFF)
    else
      TARGET_PROCESSOR_NAME=x86
      ARCH_CFLAGS=-m32
      ASM_ARCH_CFLAGS=--32
      DIRSUFF=.lnx
      MODSUFF=.ilx
      PLGSUFF=.plx
      LDRSUFF=.llx
      DLLSUFF=.so
    endif
  endif
else
ifdef __BSD__
  TARGET_PROCESSOR_NAME=x86
  STDLIBS=-lpthread
  SYSNAME=bsd
  # removing --shared makes it impossible to build shared libraries
  # but we need to build only ida.key decryptor under bsd
  SYS=$(PROCFLAG) -D__BSD__ # --shared
  _OUTDLL=-Wl,--no-undefined $(OUTDLLOPTS)
  DIRSUFF=.bsd
  MODSUFF=.ibsd
  LDRSUFF=.lbsd
  PLGSUFF=.pbsd
  DLLSUFF=.so
else # __MAC__
  ifndef MAC_EXPORT_ALL
    SYS=$(PROCFLAG) -D__MAC__ -fvisibility=hidden -fvisibility-inlines-hidden
  else
    SYS=$(PROCFLAG) -D__MAC__
  endif
  DLLSUFF=.dylib
  SYSNAME=mac
  ifdef __X64__
    TARGET_PROCESSOR_NAME=x64
    DIRSUFF=.mac64
    DLLSUFF=.dylib
    MODSUFF=$(DLLSUFF)
    PLGSUFF=$(DLLSUFF)
    LDRSUFF=$(DLLSUFF)
    MFLAG  =-m64
  else
    TARGET_PROCESSOR_NAME=x86
    DIRSUFF=.mac
    MODSUFF=.imc
    PLGSUFF=.pmc
    LDRSUFF=.lmc
    MFLAG  =-m32
  endif
  _OUTDLL=-dynamiclib $(OUTDLLOPTS)
  ifdef __TARGET_MAC_HOST_LINUX__
    FORMAT_WARNS= # turn off because the cross compiler does not understand them
  else
    _OUTDLL+=-current_version 1.0 -compatibility_version 1.0 -single_module
    SYSROOT=-mmacosx-version-min=10.5 -isysroot $(MACSDK)
    ifdef __X64__
      ASM_ARCH_CFLAGS=-arch x86_64
    else
      ASM_ARCH_CFLAGS=-arch i386
    endif
  endif
  ARCH_CFLAGS=$(ASM_ARCH_CFLAGS) $(SYSROOT) $(MFLAG)
  DYLSUF=$(SUFF64)$(DLLSUFF)
endif
endif
OUTDLL=$(SYS) $(_OUTDLL)
DEVKEY_TO_BIN=1

ADRDIR=$(TARGET_PROCESSOR_NAME)_$(SYSNAME)_$(COMPILER_NAME)_$(ADRSIZE)
SYSDIR=$(ADRDIR)$(OPTSUF)
# output directory for target platform
R=$(IDA)bin/
# input directory with existing build utilities
RS=$(IDA)bin/
# output directory for new build utilities
RT=$(R)
C=$(R)cfg/
RI=$(RS)idc/
I=$(IDA)include/

HH=.hhp
HS=.hls
A=.a
ifdef __X64__
  O=.o
  IDP=$(SUFF64)$(MODSUFF)
  LDR=$(SUFF64)$(LDRSUFF)
  PLUGIN=$(SUFF64)$(PLGSUFF)
else
  O=.o$(ADRSIZE)
  IDP=$(SUFF64)$(MODSUFF)$(SUFF64)
  LDR=$(SUFF64)$(LDRSUFF)$(SUFF64)
  PLUGIN=$(PLGSUFF)$(SUFF64)
endif
B=$(SUFF64)
BS=$(SUFF64)
CONLY=-c
LANGC=-xc

ifndef __MAC__
PTHR_SWITCH=-pthread
endif

# we can not use strict-aliasing because we do have
# pointers of different type pointing to the same location in many cases.
CFLAGS=$(CCOPT) $(SYS) $(SWITCH64) $(SWITCHX64) -I$(I) -DNO_OBSOLETE_FUNCS $(WARNS) -fwrapv \
       $(ARCH_CFLAGS) $(PIC) -pipe -fno-strict-aliasing $(PTHR_SWITCH) $(_CFLAGS)

# disable RTTI by default
ifndef __USE_RTTI__
NORTTI=-fno-rtti
endif

LIBDIR=$(IDA)lib/$(ADRDIR)
OBJDIR=obj/$(SYSDIR)
F=$(OBJDIR)/
L=$(LIBDIR)/

CP=cp -f
MV=mv
RM=rm -f
AS=as
MKDIR=-@mkdir 2>/dev/null

AS=as $(ASM_ARCH_CFLAGS)
ifdef __MAC__   # plain mac
  ifndef __TARGET_MAC_HOST_LINUX__
    LIBICONV=-liconv
    STDLIBS=-lpthread $(LIBICONV)
  endif
endif

ifndef __IPHONE__
  ifdef __LSB__
    LSBOPTS=--lsb-shared-libs=ida:tvision:clp
    CC=/opt/lsb/bin/lsbcc --lsb-cc=gcc $(LSBOPTS)
    CXX=/opt/lsb/bin/lsbc++ --lsb-cxx=g++ $(LSBOPTS)
  else ifdef __TARGET_MAC_HOST_LINUX__
    CC=/opt/mac/bin/i686-apple-darwin8-gcc
    CXX=/opt/mac/bin/i686-apple-darwin8-g++
    _OUTDLL=-dynamiclib $(OUTDLLOPTS)
  else
    CC=gcc
    CXX=g++
  endif
endif

ifdef __LINUX__
  CCL=$(CXX) $(ARCH_CFLAGS)
else
  CCL=$(CXX) $(CFLAGS)
endif
# to be used like this: $(call link_dumb,$@ objfiles)
link_dumb=$(CCL) $(OUTSW)$1 $(DUMB) $(L)pro$(A) $(STDLIBS)

HLIB=$(RS)_ida.hlp
DUMB=$(L)dumb$(O)
HELP=$(L)help$(O)
IDALIB=$(R)libida$(SUFF64)$(DLLSUFF)
LINKIDA=-lida$(SUFF64)
ifdef __X64__
  LINKCLP=-lclpx
  CLPLIB=$(R)libclpx$(DLLSUFF)
else
  LINKCLP=-lclp
  CLPLIB=$(R)libclp$(DLLSUFF)
endif

ifdef __PIC__
  ifdef __X64__
    PIC=-fPIC
  else
    PIC=-fpic
  endif
endif

R32=$(R)
B32=$(B)

AR=$(RS)qar.sh rus
HC=$(R)ihc$(B)
STM=$(R)stm$(B)
PYTHON?=/usr/bin/python
NASM?=nasm
OUTSW=-o #with space
OBJSW=-o #with space


.SUFFIXES: $(HH) $(HS) .c .h .cpp .hpp $(O) .at $(A) .grm .cfg
.PHONY: all includes Goal goal config cfg objdir $(ADDITIONAL_GOALS)

$(F)%$(O): %.cpp | $(OBJDIR)
	$(CXX) $(CFLAGS) $(NORTTI) -c $(OBJSW)$@ $<

$(F)%$(O): %.c | $(OBJDIR)
ifdef DONT_FORCE_CPP
	$(CC) $(CFLAGS) -c $(OBJSW)$@ $<
else
	$(CXX) $(CFLAGS) -c $(OBJSW)$@ $<
endif

.hls.hhp: | $(HC)
	$(HC) -t $(HLIB) -i$@ $<

endif # if mac or linux
